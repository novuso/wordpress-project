# {{ ansible_managed }}
# nginx Configuration File
# http://wiki.nginx.org/Configuration
# https://github.com/h5bp/server-configs-nginx

# Run as a less privileged user for security reasons.
user {{ nginx_user }};

# How many worker threads to run;
# "auto" sets it to the number of CPU cores available in the system, and
# offers the best performance. Don't set it higher than the number of CPU
# cores if changing this parameter.

# The maximum number of connections for Nginx is calculated by:
# max_clients = worker_processes * worker_connections
worker_processes {{ nginx_worker_processes }};

# Maximum open file descriptors per process;
# should be > worker_connections.
worker_rlimit_nofile {{ nginx_worker_rlimit_nofile }};

events {
# When you need > 8000 * cpu_cores connections, you start optimizing your OS,
# and this is probably the point at which you hire people who are smarter than
# you, as this is *a lot* of requests.
worker_connections {{ nginx_worker_connections }};
}

# Default error log file
# (this is only used when you don't override error_log on a server{} level)
error_log  {{ nginx_error_log }};
pid        /run/nginx.pid;

http {

# Nginx version information.
server_tokens {{ nginx_server_tokens }};

# Define the MIME types for files.
include       mime.types;
default_type  {{ nginx_default_type }};

# Update charset_types due to updated mime.types
charset_types text/xml text/plain text/vnd.wap.wml application/x-javascript application/rss+xml text/css application/javascript application/json;

# Client max body size
client_max_body_size {{ nginx_client_max_body_size }};

# Format to use in log files
log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
'$status $body_bytes_sent "$http_referer" '
'"$http_user_agent" "$http_x_forwarded_for"';

# Default log file
# (this is only used when you don't override access_log on a server{} level)
access_log {{ nginx_access_log }};

# How long to allow each connection to stay idle; longer values are better
# for each individual client, particularly for SSL, but means that worker
# connections are tied up longer. (Default: 65)
keepalive_timeout {{ nginx_keepalive_timeout }};

# Speed up file transfers by using sendfile() to copy directly
# between descriptors rather than using read()/write().
sendfile        {{ nginx_sendfile }};

# Tell Nginx not to send out partial frames; this increases throughput
# since TCP frames are filled up before being sent out. (adds TCP_CORK)
tcp_nopush      {{ nginx_tcp_nopush }};

# Compression

# Enable Gzip compressed.
gzip {{ nginx_gzip }};
gzip_disable "{{ nginx_gzip_disable }}";

# Compression level (1-9).
# 5 is a perfect compromise between size and cpu usage, offering about
# 75% reduction for most ascii files (almost identical to level 9).
gzip_comp_level    {{ nginx_gzip_comp_level }};

# Don't compress anything that's already small and unlikely to shrink much
# if at all (the default is 20 bytes, which is bad as that usually leads to
# larger files after gzipping).
gzip_min_length    {{ nginx_gzip_min_length }};

# Compress data even for clients that are connecting to us via proxies,
# identified by the "Via" header (required for CloudFront).
gzip_proxied       {{ nginx_gzip_proxied }};

# Tell proxies to cache both the gzipped and regular version of a resource
# whenever the client's Accept-Encoding capabilities header varies;
# Avoids the issue where a non-gzip capable client (which is extremely rare
# today) would display gibberish if their proxy gave them the gzipped version.
gzip_vary          {{ nginx_gzip_vary }};

# Compress all output labeled with one of the following MIME-types.
gzip_types
{% for type in nginx_gzip_types %}
    {{ type }}{% if loop.last %};{% endif %}

{% endfor %}
# text/html is always compressed by HttpGzipModule

# This should be turned on if you are going to have pre-compressed copies (.gz) of
# static files available. If not it should be left off as it will cause extra I/O
# for the check. It is best if you enable this in a location{} block for
# a specific directory, or on an individual server{} level.
# gzip_static on;

include /etc/nginx/conf.d/*.conf;
include /etc/nginx/sites-enabled/*;
}
